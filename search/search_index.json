{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>The current version of the documentation is designed for Hikari. </p>"},{"location":"#aurum","title":"Aurum","text":"<p>A flexible framework for handling commands and components.</p> <p>Create your bot easily and simply without worrying about speed, resources usage. You can create your own custom implementations of Aurum's components \u2013 your freedom of action is our top priority.</p>"},{"location":"#resources","title":"Resources","text":"<ul> <li> Pypi</li> <li> Github</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> <p> Easy and powerful</p> <p>Install in one command and make a reliable, stable bot with Aurum and Hikari.</p> <p> Quick start</p> </li> <li> <p> Flexibility</p> <p>We don't implement our own hikari and our flexibility lies in your independence in your project.</p> <p> API Reference</p> </li> <li> <p> 3 in 1, like coffee</p> <p>Our goal is to integrate the handling of commands and components into one module,  which will simplify your project.</p> <p> How to</p> </li> <li> <p> And many-many other features</p> <p>No extra words are needed. Try Aurum and see for yourself. </p> <p> Quick start</p> </li> </ul>"},{"location":"#our-inspiration","title":"Our inspiration","text":"<p>We must acknowledge that we have come from something, and those wonderful projects are the source of our inspiration.</p> <ul> <li> Hikari Crescent</li> </ul>"},{"location":"quick-start/","title":"Quick start","text":""},{"location":"quick-start/#installation","title":"Installation","text":"<p>Note</p> <p>Aurum requires Python 3.10 or higher.</p> <p>Run command <code>pip install (1) aurum-hikari</code> or:</p> <ol> <li>You can use the -U flag with the <code>install</code> command (e.g., <code>pip install -U ...</code>) to update a package.</li> </ol> UnixWindows <p><code>python3 -m pip install (1) aurum-hikari</code></p> <ol> <li>You can use the -U flag with the <code>install</code> command (e.g., <code>pip install -U ...</code>) to update a package.</li> </ol> <p><code>py -m pip install (1) aurum-hikari</code></p> <ol> <li>You can use the -U flag with the <code>install</code> command (e.g., <code>pip install -U ...</code>) to update a package.</li> </ol>"},{"location":"quick-start/#how-to","title":"How to","text":""},{"location":"quick-start/#create-a-command","title":"Create a command","text":""},{"location":"quick-start/#slash-command","title":"Slash command","text":"<p>You need to import the SlashCommand class and inherit from it.</p> <p>Example</p> With callbackWith sub-commands <pre><code>class HelloCommand(SlashCommand):\n    def __init__(self) -&gt; None:\n        super().__init__(name=\"hello\", description=\"Say hi to bot\")  # (1)\n\n    async def callback(self, context: InteractionContext) -&gt; None:\n        await context.create_response(f\"Hi, {context.user.mention}!\")\n</code></pre> <ol> <li>Base information about your command: name, description, default member permissions and etc.</li> </ol> <pre><code>class ABCCommand(SlashCommand):  # (1)\n    def __init__(self) -&gt; None:\n        super().__init__(name=\"a\")  # (2)\n\n    @sub_command(name=\"b\")  # (3)\n    async def b_command(self, context: InteractionContext) -&gt; None:\n        ...  # (4)\n\n    @b_command.sub_command(name=\"c\")\n    async def b_c_command(self, context: InteractionContext) -&gt; None:\n        ...\n</code></pre> <ol> <li>When command has a sub-commands, callback will be ignored.</li> <li>Base information about your command: name, description, default member permissions and etc.</li> <li>Base information about your sub-command. The same fields with slash-command, but without guild, default member permissions, is nsfw, dm enabled flags.</li> <li>If sub-command have another sub-command, callback of parent sub-command will be ignored too.</li> </ol>"},{"location":"quick-start/#user-command","title":"User command","text":"<p>Note</p> <p>User command this an application command in user's context menu.</p> <p>You need to import the UserCommand class and inherit from it.</p> <p>Example</p> <pre><code>class HelloUserCommand(UserCommand):\n    def __init__(self) -&gt; None:\n        super().__init__(name=\"Hello to\")\n\n    async def callback(self, context: InteractionContext, target: InteractionMember | User) -&gt; None:\n        await context.create_response(f\"Hi, {target.mention}!\")\n</code></pre>"},{"location":"quick-start/#message-command","title":"Message command","text":"<p>Note</p> <p>User command this an application command in message's context menu.</p> <p>You need to import the MessageCommand class and inherit from it.</p> <p>Example</p> <pre><code>class ReverseTextCommand(MessageCommand):\n    def __init__(self) -&gt; None:\n        super().__init__(name=\"Reverse\", dm_enabled=True)\n\n    async def callback(self, context: InteractionContext, message: Message) -&gt; None:\n        await context.create_response(message.content[::-1])\n</code></pre>"},{"location":"quick-start/#work-with-plugins","title":"Work with plugins","text":"<p>For clarity, you can see a sample project with plugins in the examples.</p>"},{"location":"quick-start/#work-with-components","title":"Work with components","text":"<p>Sadly, but at the moment Aurum don't have a components. </p>"},{"location":"reference/autocomplete/","title":"Autocomplete","text":"<p>You can see how to work with autocomplete options in example.</p>"},{"location":"reference/autocomplete/#aurum.autocomplete.AutocompleteChoice","title":"AutocompleteChoice","text":"<p>Represents the autocomplete choice.</p>"},{"location":"reference/autocomplete/#aurum.autocomplete.AutocompleteChoice.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = attrs.field(eq=False)\n</code></pre> <p>Name of choice.</p> <p>That will be displayed to user.</p>"},{"location":"reference/autocomplete/#aurum.autocomplete.AutocompleteChoice.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int | str | float = attrs.field(eq=False)\n</code></pre> <p>Internal value of choice.</p>"},{"location":"reference/client/","title":"Client","text":""},{"location":"reference/client/#aurum.client.Client","title":"Client","text":"<p>A wrapper class for the main bot class, designed to work with the Aurum framework and its features.</p> Note <p>At the moment, the wrapper only supports gateway connections.</p> <p>Attributes:</p> <ul> <li> <code>bot</code>               (<code>GatewayBotAware</code>)           \u2013            <p>The bot instance.</p> </li> <li> <code>l10n</code>               (<code>LocalizationProviderInterface</code>)           \u2013            <p>The localization provider instance for multi-language support. It is recommended to provide a localization provider if multi-language support is required.</p> </li> <li> <code>commands</code>               (<code>CommandHandler</code>)           \u2013            <p>The command handler.</p> </li> <li> <code>plugins</code>               (<code>PluginManager</code>)           \u2013            <p>The plugins manager.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>GatewayBotAware</code>)           \u2013            <p>The bot instance that this client will interact with.</p> </li> <li> <code>l10n</code>               (<code>LocalizationProviderInterface</code>, default:                   <code>None</code> )           \u2013            <p>Localization provider. If a localization provider is not provided, an <code>EmptyLocalizationProvider</code> will be used, which will pass all functions and return the key.</p> </li> <li> <code>sync_commands</code>               (<code>SyncCommandFlag</code>, default:                   <code>SyncCommandsFlag.SYNC</code> )           \u2013            <p>An optional SyncCommandsFlag enum value, indicating how to handle command synchronization.</p> </li> <li> <code>ignore_l10n</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>An optional flag. If <code>True</code>, the client will not emit a warning when a localization provider is not provided.</p> </li> <li> <code>ignore_unknown_interactions</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>An optional flag that, if set to <code>True</code>, will disable the warning message for unknown interactions.</p> </li> </ul>"},{"location":"reference/client/#aurum.client.Client.add_starting_task","title":"add_starting_task","text":"<pre><code>add_starting_task(task: Callable[..., Any] | Coroutine[None, None, Any], **kwargs: Any) -&gt; None\n</code></pre> <p>Add starting task.</p> <p>With coroutine function: <code>Client.add_starting_task(coroutine_function(...))</code> With sync function: <code>Client.add_starting_task(some_function, integer=956)</code> or <code>Client.add_starting_task(labmda: some_function(956))</code></p>"},{"location":"reference/client/#aurum.client.Client.include","title":"include","text":"<pre><code>include(includable: Type[Includable]) -&gt; None\n</code></pre> <p>Decorator to include an includable object to client.</p>"},{"location":"reference/context/","title":"Context","text":""},{"location":"reference/context/#aurum.context.AutocompleteContext","title":"AutocompleteContext","text":"<p>Represents an autocomplete interaction context.</p> <p>Attributes:</p> <ul> <li> <code>interaction</code>               (<code>AutocompleteInteraction</code>)           \u2013            <p>The interaction of context.</p> </li> <li> <code>bot</code>               (<code>GatewayBotAware</code>)           \u2013            <p>The instance of the bot.</p> </li> <li> <code>client</code>               (<code>Client</code>)           \u2013            <p>The client.</p> </li> <li> <code>locale</code>               (<code>Any</code>)           \u2013            <p>An any locale object for the interaction.</p> </li> </ul>"},{"location":"reference/context/#aurum.context.InteractionContext","title":"InteractionContext","text":"<p>Represents an interaction context.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.arguments","title":"arguments  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arguments: Dict[str, Any] = attrs.field(factory=dict, eq=False)\n</code></pre> <p>Arguments to the interaction.</p> <p>Note</p> <p>Available only for commands.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.bot","title":"bot  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bot: GatewayBotAware = attrs.field(eq=False, repr=False)\n</code></pre> <p>The instance of the bot.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.channel","title":"channel  <code>property</code>","text":"<pre><code>channel: PartialChannel | None\n</code></pre> <p>Channel of the interaction.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.client","title":"client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client: Client = attrs.field(eq=False, repr=False)\n</code></pre> <p>The client.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.command","title":"command  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>command: AppCommand | None = attrs.field(eq=False, default=None, repr=False)\n</code></pre> <p>Command of interaction.</p> <p>Note</p> <p>Available only for commands.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.guild","title":"guild  <code>property</code>","text":"<pre><code>guild: GatewayGuild | None\n</code></pre> <p>Guild of the interaction.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.interaction","title":"interaction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>interaction: CommandInteraction | ComponentInteraction = attrs.field(eq=False)\n</code></pre> <p>The interaction of context.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.locale","title":"locale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>locale: Any = attrs.field(eq=False)\n</code></pre> <p>An any locale object for the interaction.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.member","title":"member  <code>property</code>","text":"<pre><code>member: InteractionMember | None\n</code></pre> <p>Member of the interaction.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.user","title":"user  <code>property</code>","text":"<pre><code>user: PartialUser\n</code></pre> <p>User of the interaction.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.create_response","title":"create_response  <code>async</code>","text":"<pre><code>create_response(content: UndefinedOr[Any] = UNDEFINED, *, flags: MessageFlag = MessageFlag.NONE, ephemeral: bool = False, attachment: UndefinedOr[Resourceish] = UNDEFINED, attachments: UndefinedOr[Sequence[Resourceish]] = UNDEFINED, component: UndefinedOr[ComponentBuilder] = UNDEFINED, components: UndefinedOr[Sequence[ComponentBuilder]] = UNDEFINED, embed: UndefinedOr[Embed] = UNDEFINED, embeds: UndefinedOr[Sequence[Embed]] = UNDEFINED, mentions_everyone: UndefinedOr[bool] = UNDEFINED, user_mentions: UndefinedOr[SnowflakeishSequence[PartialUser] | bool] = UNDEFINED, role_mentions: UndefinedOr[SnowflakeishSequence[PartialRole] | bool] = UNDEFINED) -&gt; None\n</code></pre> <p>Create a response to the interaction.</p> Note <ul> <li>If the interaction appears and is not deferred, it will be available for the next three seconds.     After that, it will no longer be available.     If your callback takes more than 3 seconds, please use <code>InteractionContext.defer</code> to delay the response.</li> <li>If the interaction already has a response: default, deferred, you has to <code>InteractionContext</code>     or you'll catch a error <code>Interaction was already acknowledged</code> from Discord API.</li> </ul> <p>Parameters:</p> <ul> <li> <code>content</code>               (<code>Any</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>The content of response.</p> </li> <li> <code>flags</code>               (<code>MessageFlag</code>, default:                   <code>MessageFlag.NONE</code> )           \u2013            <p>An optional flags of response.</p> </li> <li> <code>ephemeral</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>An optional flag to create ephemeral response. Ephemeral messages that only the author of the interaction can see. They are similar to Clyde's messages.</p> </li> <li> <code>attachment</code>               (<code>Resourceish</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A single attachment of response.</p> </li> <li> <code>attachments</code>               (<code>Sequence[Resourceish]</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A list of attachments of response.</p> </li> <li> <code>component</code>               (<code>ComponentBuilder</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A single component builder of response.</p> </li> <li> <code>components</code>               (<code>Sequence[ComponentBuilder]</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A list of component builders of response.</p> </li> <li> <code>embed</code>               (<code>Embed</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A single embed of response.</p> </li> <li> <code>embeds</code>               (<code>Sequence[Embed]</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A list of embeds of response.</p> </li> <li> <code>mentions_everyone</code>               (<code>bool</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>Allows <code>@everyone</code> and <code>@here</code> to ping users if set to <code>True</code>.</p> </li> <li> <code>user_mentions</code>               (<code>UndefinedOr[SnowflakeishSequence[PartialUser] | bool]</code>, default:                   <code>UNDEFINED</code> )           \u2013            <ul> <li>Allows to ping users is set to <code>True</code>.</li> <li>A list of users that can be pinged in response.</li> </ul> </li> <li> <code>role_mentions</code>               (<code>UndefinedOr[SnowflakeishSequence[PartialRole] | bool]</code>, default:                   <code>UNDEFINED</code> )           \u2013            <ul> <li>Allows to ping roles is set to <code>True</code>.</li> <li>A list of roles that can be pinged in response.</li> </ul> </li> </ul>"},{"location":"reference/context/#aurum.context.InteractionContext.defer","title":"defer  <code>async</code>","text":"<pre><code>defer(flags: MessageFlag = MessageFlag.NONE, *, ephemeral: bool = False) -&gt; None\n</code></pre> <p>Create a deferred response to the interaction.</p> Note <p>The interaction will be available in the next 15 minutes.</p> <p>Parameters:</p> <ul> <li> <code>flags</code>               (<code>MessageFlag</code>, default:                   <code>MessageFlag.NONE</code> )           \u2013            <p>An optional flags for response.</p> </li> <li> <code>ephemeral</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>An optional flag to create ephemeral response. Ephemeral messages that only the author of the interaction can see. They are similar to Clyde's messages.</p> </li> </ul>"},{"location":"reference/context/#aurum.context.InteractionContext.delete_response","title":"delete_response  <code>async</code>","text":"<pre><code>delete_response() -&gt; None\n</code></pre> <p>Delete the interaction's response.</p>"},{"location":"reference/context/#aurum.context.InteractionContext.edit_response","title":"edit_response  <code>async</code>","text":"<pre><code>edit_response(content: UndefinedOr[Any] = UNDEFINED, *, attachment: UndefinedOr[Resourceish] = UNDEFINED, attachments: UndefinedOr[Sequence[Resourceish]] = UNDEFINED, component: UndefinedOr[ComponentBuilder] = UNDEFINED, components: UndefinedOr[Sequence[ComponentBuilder]] = UNDEFINED, embed: UndefinedOr[Embed] = UNDEFINED, embeds: UndefinedOr[Sequence[Embed]] = UNDEFINED) -&gt; Message | None\n</code></pre> <p>Edit the response of the interaction.</p> <p>Parameters:</p> <ul> <li> <code>content</code>               (<code>Any</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>The content of response.</p> </li> <li> <code>attachment</code>               (<code>Resourceish</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A single attachment of response.</p> </li> <li> <code>attachments</code>               (<code>Sequence[Resourceish]</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A list of attachments of response.</p> </li> <li> <code>component</code>               (<code>ComponentBuilder</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A single component builder of response.</p> </li> <li> <code>components</code>               (<code>Sequence[ComponentBuilder]</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A list of component builders of response.</p> </li> <li> <code>embed</code>               (<code>Embed</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A single embed of response.</p> </li> <li> <code>embeds</code>               (<code>Sequence[Embed]</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>A list of embeds of response.</p> </li> </ul>"},{"location":"reference/events/","title":"Events","text":""},{"location":"reference/events/#aurum.events.AurumEvent","title":"AurumEvent","text":"<p>               Bases: <code>Event</code>, <code>abc.ABC</code></p> <p>The base class for all Aurum's events.</p>"},{"location":"reference/events/#aurum.events.AurumEvent.app","title":"app  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>app: RESTAware = attrs.field()\n</code></pre> <p>Instance of main application.</p>"},{"location":"reference/events/#aurum.events.AurumEvent.client","title":"client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client: Client = attrs.field()\n</code></pre> <p>Client.</p>"},{"location":"reference/events/#aurum.events.CommandErrorEvent","title":"CommandErrorEvent","text":"<p>               Bases: <code>InteractionEvent</code>, <code>abc.ABC</code></p> <p>Event that being dispatched, when command execution has exceptions.</p>"},{"location":"reference/events/#aurum.events.CommandErrorEvent.app","title":"app  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>app: RESTAware = attrs.field()\n</code></pre> <p>Instance of main application.</p>"},{"location":"reference/events/#aurum.events.CommandErrorEvent.client","title":"client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client: Client = attrs.field()\n</code></pre> <p>Client.</p>"},{"location":"reference/events/#aurum.events.CommandErrorEvent.command","title":"command  <code>instance-attribute</code>","text":"<pre><code>command: AppCommand\n</code></pre> <p>Command with that occurred exception.</p>"},{"location":"reference/events/#aurum.events.CommandErrorEvent.context","title":"context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>context: InteractionContext | None = attrs.field(default=None)\n</code></pre> <p>Context of interaction.</p>"},{"location":"reference/events/#aurum.events.CommandErrorEvent.exc_info","title":"exc_info  <code>instance-attribute</code>","text":"<pre><code>exc_info: Tuple[Type[BaseException], BaseException, TracebackType | None]\n</code></pre> <p>Exception triplet.</p>"},{"location":"reference/events/#aurum.events.CommandErrorEvent.exception","title":"exception  <code>instance-attribute</code>","text":"<pre><code>exception: Exception\n</code></pre> <p>Exception that was raised.</p>"},{"location":"reference/events/#aurum.events.CommandErrorEvent.interaction","title":"interaction  <code>instance-attribute</code>","text":"<pre><code>interaction: PartialInteraction\n</code></pre> <p>Interaction of event.</p>"},{"location":"reference/events/#aurum.events.ExceptionEvent","title":"ExceptionEvent","text":"<p>               Bases: <code>AurumEvent</code>, <code>abc.ABC</code></p> <p>Base class of events, that associated with exceptions.</p>"},{"location":"reference/events/#aurum.events.ExceptionEvent.app","title":"app  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>app: RESTAware = attrs.field()\n</code></pre> <p>Instance of main application.</p>"},{"location":"reference/events/#aurum.events.ExceptionEvent.client","title":"client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client: Client = attrs.field()\n</code></pre> <p>Client.</p>"},{"location":"reference/events/#aurum.events.ExceptionEvent.exc_info","title":"exc_info  <code>instance-attribute</code>","text":"<pre><code>exc_info: Tuple[Type[BaseException], BaseException, TracebackType | None]\n</code></pre> <p>Exception triplet.</p>"},{"location":"reference/events/#aurum.events.ExceptionEvent.exception","title":"exception  <code>instance-attribute</code>","text":"<pre><code>exception: Exception\n</code></pre> <p>Exception that was raised.</p>"},{"location":"reference/events/#aurum.events.InteractionEvent","title":"InteractionEvent","text":"<p>               Bases: <code>ExceptionEvent</code>, <code>abc.ABC</code></p>"},{"location":"reference/events/#aurum.events.InteractionEvent.app","title":"app  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>app: RESTAware = attrs.field()\n</code></pre> <p>Instance of main application.</p>"},{"location":"reference/events/#aurum.events.InteractionEvent.client","title":"client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client: Client = attrs.field()\n</code></pre> <p>Client.</p>"},{"location":"reference/events/#aurum.events.InteractionEvent.context","title":"context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>context: InteractionContext | None = attrs.field(default=None)\n</code></pre> <p>Context of interaction.</p>"},{"location":"reference/events/#aurum.events.InteractionEvent.exc_info","title":"exc_info  <code>instance-attribute</code>","text":"<pre><code>exc_info: Tuple[Type[BaseException], BaseException, TracebackType | None]\n</code></pre> <p>Exception triplet.</p>"},{"location":"reference/events/#aurum.events.InteractionEvent.exception","title":"exception  <code>instance-attribute</code>","text":"<pre><code>exception: Exception\n</code></pre> <p>Exception that was raised.</p>"},{"location":"reference/events/#aurum.events.InteractionEvent.interaction","title":"interaction  <code>instance-attribute</code>","text":"<pre><code>interaction: PartialInteraction\n</code></pre> <p>Interaction of event.</p>"},{"location":"reference/exceptions/","title":"Exceptions","text":""},{"location":"reference/exceptions/#aurum.exceptions.AurumException","title":"AurumException","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception of Aurum.</p>"},{"location":"reference/exceptions/#aurum.exceptions.TaskException","title":"TaskException","text":"<p>               Bases: <code>AurumException</code></p> <p>Exception for tasks.</p>"},{"location":"reference/hooks/","title":"Hooks","text":""},{"location":"reference/hooks/#aurum.hooks.Hook","title":"Hook","text":"<p>Represents a hook.</p>"},{"location":"reference/hooks/#aurum.hooks.Hook.callback","title":"callback  <code>instance-attribute</code>","text":"<pre><code>callback: HookCallbackT\n</code></pre> <p>Callback of hook.</p>"},{"location":"reference/hooks/#aurum.hooks.HookResult","title":"HookResult","text":"<p>The result of a hook callback.</p>"},{"location":"reference/hooks/#aurum.hooks.HookResult.stop","title":"stop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop: bool = attrs.field(default=False, eq=False)\n</code></pre> <p>Will hook stop execution or not.</p>"},{"location":"reference/hooks/#aurum.hooks.hook","title":"hook","text":"<pre><code>hook() -&gt; Callable[[HookCallbackT], Hook]\n</code></pre> <p>Decorator for defining a hook.</p> Example <pre><code>@hook\nasync def stop_hook(context: InteractionContext) -&gt; HookResult:\n    await context.create_response(\"No one will execute this command.\")\n    return HookResult(stop=True)\n</code></pre>"},{"location":"reference/includable/","title":"Includable","text":""},{"location":"reference/includable/#aurum.includable.Includable","title":"Includable","text":"<p>Class for includable objects.</p>"},{"location":"reference/option/","title":"Option","text":""},{"location":"reference/option/#aurum.option.Choice","title":"Choice","text":"<p>Represents the option's choice.</p>"},{"location":"reference/option/#aurum.option.Option","title":"Option","text":"<p>Represents the command option.</p>"},{"location":"reference/option/#aurum.option.Option.autocomplete","title":"autocomplete  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>autocomplete: AutocompleteCallbackT | None = attrs.field(default=None, repr=True, eq=False)\n</code></pre> <p>Autocomplete callback.</p> <p>When this argument is specified, the option becomes autocompletable.</p>"},{"location":"reference/option/#aurum.option.Option.channel_types","title":"channel_types  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>channel_types: Sequence[ChannelType] = attrs.field(factory=tuple, repr=False, eq=False)\n</code></pre> <p>An optional channel types are available for selection.</p> Note <p>Available only for the channel option type.</p>"},{"location":"reference/option/#aurum.option.Option.choices","title":"choices  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>choices: Sequence[Choice] = attrs.field(factory=tuple, repr=False, eq=False)\n</code></pre> <p>A list of choices to the option.</p>"},{"location":"reference/option/#aurum.option.Option.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: LocalizedOr[str] = attrs.field(default='No description', repr=False, eq=False)\n</code></pre> <p>The description of the option.</p>"},{"location":"reference/option/#aurum.option.Option.display_name","title":"display_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>display_name: LocalizedOr[str] | None = attrs.field(default=None, repr=False, eq=False)\n</code></pre> <p>Display name of option.</p> Note <p>Can be localized.</p>"},{"location":"reference/option/#aurum.option.Option.is_required","title":"is_required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_required: bool = attrs.field(default=True, repr=True, eq=False)\n</code></pre> <p>An optional flag is the option is required.</p> <p>Default: True</p>"},{"location":"reference/option/#aurum.option.Option.max_length","title":"max_length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_length: int | None = attrs.field(default=None, repr=False, eq=False)\n</code></pre> <p>An optional maximum length of the option value.</p> Note <p>Available only for the string option type.</p>"},{"location":"reference/option/#aurum.option.Option.max_value","title":"max_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_value: int | None = attrs.field(default=None, repr=False, eq=False)\n</code></pre> <p>An optional maximum value of the option value.</p> Note <p>Available only for the integer/float option type.</p>"},{"location":"reference/option/#aurum.option.Option.min_length","title":"min_length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_length: int | None = attrs.field(default=None, repr=False, eq=False)\n</code></pre> <p>An optional minimum length of the option value.</p> Note <p>Available only for the string option type.</p>"},{"location":"reference/option/#aurum.option.Option.min_value","title":"min_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_value: int | None = attrs.field(default=None, repr=False, eq=False)\n</code></pre> <p>An optional minimum value of the option value.</p> Note <p>Available only for the integer/float option type.</p>"},{"location":"reference/option/#aurum.option.Option.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = attrs.field(eq=False)\n</code></pre> <p>The unique name of the option.</p>"},{"location":"reference/option/#aurum.option.Option.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: OptionType = attrs.field(eq=False)\n</code></pre> <p>The option type.</p>"},{"location":"reference/commands/command_handler/","title":"Command handler","text":""},{"location":"reference/commands/command_handler/#aurum.commands.command_handler.CommandHandler","title":"CommandHandler","text":"<p>Handles command building and synchronization for a bot application.</p> <p>This class is responsible for application commands. It registers commands, synchronizes them with the Discord API.</p> <p>Attributes:</p> <ul> <li> <code>commands</code>               (<code>Dict[str, AppCommand]</code>)           \u2013            <p>Dictionary that stores the AppCommand instances, keyed by their names.</p> </li> </ul>"},{"location":"reference/commands/command_handler/#aurum.commands.command_handler.CommandHandler.get_command","title":"get_command","text":"<pre><code>get_command(context: InteractionContext | AutocompleteContext) -&gt; SlashCommand | ContextMenuCommand | SubCommand\n</code></pre> <p>Get command from context.</p> <p>Because sub-commands are passed through the <code>options</code> field of the received interaction, the arguments for the command have already been processed and are located in the <code>context.arguments</code> field (<code>InteractionContext.arguments</code>).</p>"},{"location":"reference/commands/command_handler/#aurum.commands.command_handler.CommandHandler.load_folder","title":"load_folder","text":"<pre><code>load_folder(directory: PathLike[str]) -&gt; None\n</code></pre> <p>Load commands from folder.</p>"},{"location":"reference/commands/command_handler/#aurum.commands.command_handler.CommandHandler.sync","title":"sync  <code>async</code>","text":"<pre><code>sync(*, debug: bool = False) -&gt; None\n</code></pre> <p>Synchronizes the builders of commands with the Discord API for the bot application.</p> <p>This method will handle both global commands and guild-specific commands.</p> <p>Parameters:</p> <ul> <li> <code>debug</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>A boolean flag that, when set to True, enables more verbose logging    of the synchronization process for debugging purposes.</p> </li> </ul>"},{"location":"reference/commands/message_command/","title":"Message command","text":""},{"location":"reference/commands/message_command/#aurum.commands.message_command.MessageCommand","title":"MessageCommand","text":"<p>               Bases: <code>ContextMenuCommand</code></p> <p>Represents an application command for message's context menu.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The unique name of the command.</p> </li> <li> <code>display_name</code>               (<code>LocalizedOr[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>A display name of command. Can be localized.</p> </li> <li> <code>guild</code>               (<code>SnowflakeishOr[PartialGuild] | UndefinedType</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>Optional guild (server) where the command is available.</p> </li> <li> <code>default_member_permissions</code>               (<code>Permissions</code>, default:                   <code>Permissions.NONE</code> )           \u2013            <p>The permissions a user must have to use the command by default.</p> </li> <li> <code>is_dm_enabled</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether the command can be used in direct messages.</p> </li> <li> <code>is_nsfw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates whether the command is age-restricted.</p> </li> </ul> Example <pre><code>class ReverseTextCommand(MessageCommand):\n    def __init__(self) -&gt; None:\n        super().__init__(name=\"Reverse\", is_dm_enabled=True)\n\n    async def callback(self, context: InteractionContext, message: Message) -&gt; None:\n        await context.create_response(message.content[::-1])\n</code></pre>"},{"location":"reference/commands/message_command/#aurum.commands.message_command.MessageCommand.callback","title":"callback  <code>async</code>","text":"<pre><code>callback(context: InteractionContext, message: Message) -&gt; None\n</code></pre> <p>A callback of the command.</p> <p>Meant to override this method to set the callback to the command.</p> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>If callback wasn't overrided.</p> </li> </ul>"},{"location":"reference/commands/slash_command/","title":"Slash command","text":""},{"location":"reference/commands/slash_command/#aurum.commands.slash_command.SlashCommand","title":"SlashCommand","text":"<p>               Bases: <code>AppCommand</code></p> <p>Represents a slash-command.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The unique name of the command.</p> </li> <li> <code>description</code>               (<code>LocalizedOr[str] | None</code>, default:                   <code>'No description'</code> )           \u2013            <p>A description of command.</p> </li> <li> <code>display_name</code>               (<code>LocalizedOr[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>A display name of command. Can be localized.</p> </li> <li> <code>guild</code>               (<code>SnowflakeishOr[PartialGuild] | UndefinedType</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>The guild in which the command is available.</p> </li> <li> <code>default_member_permissions</code>               (<code>Permissions</code>, default:                   <code>Permissions.NONE</code> )           \u2013            <p>Permissions required to use the command, if any. Defaults to NONE.</p> </li> <li> <code>is_dm_enabled</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Flag indicating whether the command is available in direct messages. Defaults to <code>False</code>.</p> </li> <li> <code>is_nsfw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Flag indicating whether the command should only be available in NSFW channels. Defaults to <code>False</code>.</p> </li> <li> <code>options</code>               (<code>Sequence[Option]</code>, default:                   <code>()</code> )           \u2013            <p>Options to the command.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>options</code>               (<code>Sequence[Option]</code>)           \u2013            <p>Options to the command.</p> </li> <li> <code>sub_commands</code>               (<code>Dict[str, SubCommand]</code>)           \u2013            <p>Sub-commands of the command.</p> </li> </ul> Example With callbackWith sub-commands <pre><code>class HelloCommand(SlashCommand):\n    def __init__(self) -&gt; None:\n        super().__init__(name=\"hello\", description=\"Say hi to bot\")  # (1)\n\n    async def callback(self, context: InteractionContext) -&gt; None:\n        await context.create_response(f\"Hi, {context.user.mention}!\")\n</code></pre> <ol> <li>Base information about your command: name, description, default member permissions and etc.</li> </ol> <pre><code>class ABCCommand(SlashCommand):  # (1)\n    def __init__(self) -&gt; None:\n        super().__init__(name=\"a\")  # (2)\n\n    @sub_command(name=\"b\")  # (3)\n    async def b_command(self, context: InteractionContext) -&gt; None:\n        ...  # (4)\n\n    @b_command.sub_command(name=\"c\")\n    async def b_c_command(self, context: InteractionContext) -&gt; None:\n        ...\n</code></pre> <ol> <li>When command has a sub-commands, callback will be ignored.</li> <li>Base information about your command: name, description, default member permissions and etc.</li> <li>Base information about your sub-command.     The same fields with slash-command, but without guild, default member permissions, is nsfw, dm enabled flags.</li> <li>If sub-command have another sub-command, callback of parent sub-command will be ignored too.</li> </ol>"},{"location":"reference/commands/sub_command/","title":"Sub command","text":""},{"location":"reference/commands/sub_command/#aurum.commands.sub_command.SubCommand","title":"SubCommand","text":""},{"location":"reference/commands/sub_command/#aurum.commands.sub_command.SubCommand.sub_command","title":"sub_command","text":"<pre><code>sub_command(name: str | None = None, description: LocalizedOr[str] = 'No description', *, display_name: LocalizedOr[str] | None = None, options: Sequence[Option] = (), hooks: Sequence[Hook] = ()) -&gt; Callable[[CommandCallbackT], None]\n</code></pre> <p>Decorator for the sub-command.</p> <p>This object can only be created by using the decorator @sub_command on a function in a class that inherits from SlashCommand.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The unique name for the sub-command.</p> </li> <li> <code>description</code>               (<code>LocalizedOr[str] | None</code>, default:                   <code>'No description'</code> )           \u2013            <p>Optional description for the sub-command.</p> </li> <li> <code>display_name</code>               (<code>LocalizedOr[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>A display name of command. Can be localized.</p> </li> <li> <code>options</code>               (<code>Sequence[Option]</code>, default:                   <code>()</code> )           \u2013            <p>Optional options of the sub-command.</p> </li> </ul> Note <p>The callback must be asynchronous.</p>"},{"location":"reference/commands/user_command/","title":"User command","text":""},{"location":"reference/commands/user_command/#aurum.commands.user_command.UserCommand","title":"UserCommand","text":"<p>               Bases: <code>ContextMenuCommand</code></p> <p>Represents an application command for user's context menu.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The unique name of the command.</p> </li> <li> <code>display_name</code>               (<code>LocalizedOr[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>A display name of command. Can be localized.</p> </li> <li> <code>guild</code>               (<code>SnowflakeishOr[PartialGuild] | UndefinedType</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>Optional guild (server) where the command is available.</p> </li> <li> <code>default_member_permissions</code>               (<code>Permissions</code>, default:                   <code>Permissions.NONE</code> )           \u2013            <p>The permissions a user must have to use the command by default.</p> </li> <li> <code>is_dm_enabled</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether the command can be used in direct messages.</p> </li> <li> <code>is_nsfw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates whether the command is age-restricted.</p> </li> </ul> Example <pre><code>class HelloUserCommand(UserCommand):\n    def __init__(self) -&gt; None:\n        super().__init__(name=\"Hello to\")\n\n    async def callback(self, context: InteractionContext, target: InteractionMember | User) -&gt; None:\n        await context.create_response(f\"Hi, {target.mention}!\")\n</code></pre>"},{"location":"reference/commands/user_command/#aurum.commands.user_command.UserCommand.callback","title":"callback  <code>async</code>","text":"<pre><code>callback(context: InteractionContext, target: InteractionMember | PartialUser) -&gt; None\n</code></pre> <p>A callback of the command.</p> <p>Meant to override this method to set the callback to the command.</p> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>If callback wasn't overrided.</p> </li> </ul>"},{"location":"reference/commands/decorators/sub_command/","title":"Sub command","text":""},{"location":"reference/commands/decorators/sub_command/#aurum.commands.decorators.sub_command.sub_command","title":"sub_command","text":"<pre><code>sub_command(name: str | None = None, description: LocalizedOr[str] = 'No description', *, display_name: LocalizedOr[str] | None = None, options: Sequence[Option] = (), hooks: Sequence[Hook] = ()) -&gt; Callable[[CommandCallbackT], SubCommand]\n</code></pre> <p>Decorator for the sub-command.</p> <p>Can be used only in a command class that inherits from <code>aurum.commands.slash_command.SlashCommand</code>.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The unique name for the sub-command.</p> </li> <li> <code>description</code>               (<code>LocalizedOr[str] | None</code>, default:                   <code>'No description'</code> )           \u2013            <p>Optional description for the sub-command.</p> </li> <li> <code>display_name</code>               (<code>LocalizedOr[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>A display name of command. Can be localized.</p> </li> <li> <code>options</code>               (<code>Sequence[Option]</code>, default:                   <code>()</code> )           \u2013            <p>Optional options of the sub-command.</p> </li> </ul> Note <p>The callback must be asynchronous.</p>"},{"location":"reference/commands/enum/sync_commands_flag/","title":"Sync commands flag","text":""},{"location":"reference/commands/enum/sync_commands_flag/#aurum.commands.enum.sync_commands.SyncCommandsFlag","title":"SyncCommandsFlag","text":"<p>               Bases: <code>Enum</code></p> <p>Defines the modes of synchronization for commands in the Discord API.</p> <p>Attributes:</p> <ul> <li> <code>NONE</code>               (<code>SyncCommandsFlag</code>)           \u2013            <p>Represents no synchronization.</p> </li> <li> <code>SYNC</code>               (<code>SyncCommandsFlag</code>)           \u2013            <p>Represents synchronization process.</p> </li> <li> <code>DEBUG</code>               (<code>SyncCommandsFlag</code>)           \u2013            <p>Represents synchronization process with debug information.</p> </li> </ul>"},{"location":"reference/cooldown/bucket/","title":"Bucket","text":""},{"location":"reference/cooldown/bucket/#aurum.ext.cooldown.bucket.BucketType","title":"BucketType","text":"<p>               Bases: <code>int</code>, <code>enum.Enum</code></p> <p>Bucket for specifying the cooldown scope</p>"},{"location":"reference/cooldown/cooldown/","title":"Cooldown","text":""},{"location":"reference/cooldown/cooldown/#aurum.ext.cooldown.cooldown.Cooldown","title":"Cooldown","text":"<p>Implements a cooldown mechanism for controlling command usage over time.</p> <p>Parameters:</p> <ul> <li> <code>delay</code>               (<code>float | timedelta</code>)           \u2013            <p>The time delay for the cooldown.</p> </li> <li> <code>capacity</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>The allowed capacity within the cooldown period. Defaults to 1.</p> </li> <li> <code>bucket</code>               (<code>BucketType</code>, default:                   <code>BucketType.USER</code> )           \u2013            <p>The type of bucket for specifying the cooldown scope.</p> </li> </ul>"},{"location":"reference/cooldown/cooldown/#aurum.ext.cooldown.cooldown.Cooldown.proceed","title":"proceed","text":"<pre><code>proceed(context: InteractionContext) -&gt; None\n</code></pre> <p>Proceeds with the command invocation and applies the cooldown mechanism.</p> <p>Parameters:</p> <ul> <li> <code>context</code>               (<code>InteractionContext</code>)           \u2013            <p>The interaction context for the command invocation.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>CooldownException</code>             \u2013            <p>If the cooldown limit is reached.</p> </li> </ul>"},{"location":"reference/cooldown/cooldown/#aurum.ext.cooldown.cooldown.Cooldown.unlimit","title":"unlimit","text":"<pre><code>unlimit(target: Snowflake, entity: CooldownEntity)\n</code></pre> <p>Unlimits the target entity from the cooldown.</p>"},{"location":"reference/cooldown/cooldown/#aurum.ext.cooldown.cooldown.CooldownEntity","title":"CooldownEntity","text":"<p>Represents an entity for managing cooldown information.</p>"},{"location":"reference/cooldown/hook/","title":"Hook","text":""},{"location":"reference/cooldown/hook/#aurum.ext.cooldown.hook.cooldown","title":"cooldown","text":"<pre><code>cooldown(delay: timedelta, *, capacity: int = 1, bucket: BucketType = BucketType.USER, response: Callable[[InteractionContext, CooldownException], Awaitable[None]] = default_response) -&gt; Hook\n</code></pre> <p>Returns a hook for applying a cooldown to a command.</p> <p>Parameters:</p> <ul> <li> <code>delay</code>               (<code>timedelta</code>)           \u2013            <p>The time delay for the cooldown.</p> </li> <li> <code>capacity</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>The allowed capacity within the cooldown period. Defaults to 1.</p> </li> <li> <code>bucket</code>               (<code>BucketType</code>, default:                   <code>BucketType.USER</code> )           \u2013            <p>The type of bucket for specifying the cooldown scope.</p> </li> <li> <code>response</code>               (<code>Callable[[InteractionContext, CooldownException], Awaitable[None]]</code>, default:                   <code>default_response</code> )           \u2013            <p>The response function to handle the cooldown exception.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Hook</code> (              <code>Hook</code> )          \u2013            <p>The cooldown hook.</p> </li> </ul>"},{"location":"reference/localization/localization_provider_interface/","title":"Localization provider interface","text":""},{"location":"reference/localization/localization_provider_interface/#aurum.l10n.localization_provider_interface.LocalizationProviderInterface","title":"LocalizationProviderInterface","text":"<p>               Bases: <code>Protocol</code></p> <p>Localization provider interface.</p> <p>It's used to localize commands, components, and provide a locale for interaction. To create your own implementation, you need to inherit from this interface.</p>"},{"location":"reference/localization/localization_provider_interface/#aurum.l10n.localization_provider_interface.LocalizationProviderInterface.build_localized","title":"build_localized","text":"<pre><code>build_localized(value: Localized) -&gt; None\n</code></pre> <p>Build Localized object for Discord API.</p> <p>Warning</p> <p>This function must change Localized object.</p> <p>The new value should include translations for the localized object and any new fallback. With the fallback, you can either use the first translation, translation with your default language, or take no action if there's a fallback.</p>"},{"location":"reference/localization/localization_provider_interface/#aurum.l10n.localization_provider_interface.LocalizationProviderInterface.get_locale","title":"get_locale","text":"<pre><code>get_locale(by: str | CommandInteraction | ComponentInteraction | AutocompleteInteraction) -&gt; Any\n</code></pre> <p>Get locale by name or interaction.</p>"},{"location":"reference/localization/localization_provider_interface/#aurum.l10n.localization_provider_interface.LocalizationProviderInterface.start","title":"start  <code>async</code>","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start the localization provider.</p>"},{"location":"reference/localization/localized/","title":"Localized","text":""},{"location":"reference/localization/localized/#aurum.l10n.localized.Localized","title":"Localized","text":""},{"location":"reference/localization/localized/#aurum.l10n.localized.Localized.fallback","title":"fallback  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fallback: str | None = None\n</code></pre> <p>You should use this in your localization provider <code>build_localized</code> function, because...</p> <pre><code>#   Before: Localized(value=\"commands.hi.description\", fallback=None)\n\nLocalizationProvider.build_localized(Localized)\n\n# For example.\n# There is `build_localized` will put a first translation into fallback.\n# But you can do anything you want.\n#\n#   After: Localized(value={\"ro\": \"Saluta\u021bi botul\", \"lt\": \"Pasisveikinkite su botu\"}, fallback=\"Saluta\u021bi botul\")\n#\n# And fallback will be used for default description (for example) of command\n# and value for description_localizations of command.\n</code></pre>"},{"location":"reference/localization/localized/#aurum.l10n.localized.Localized.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str | Dict[str, Any]\n</code></pre> <p>Key.</p> <p>After building it will be replaced by translations. Look out fallback for more information.</p>"},{"location":"reference/plugins/plugin/","title":"Plugin","text":""},{"location":"reference/plugins/plugin/#aurum.ext.plugins.plugin.Plugin","title":"Plugin","text":"<p>Plugins include commands and components and provide bot, client, and etc.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The plugin name.</p> </li> <li> <code>guild</code>               (<code>SnowflakeishOr[PartialGuild] | UndefinedType</code>, default:                   <code>UNDEFINED</code> )           \u2013            <p>Optional guild (server) where the plugin is available.</p> </li> <li> <code>default_member_permissions</code>               (<code>Permissions</code>, default:                   <code>Permissions.NONE</code> )           \u2013            <p>The permissions a user must have to use the plugin by default.</p> </li> <li> <code>is_dm_enabled</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether the plugin can be used in direct messages.</p> </li> <li> <code>is_nsfw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates whether the plugin is age-restricted.</p> </li> <li> <code>override</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Boolean flag to override commands attributes. If override is set to True, the values for guild, default_member_permissions, is_dm_enabled, and is_nsfw will be overridden.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>included</code>               (<code>Dict[str, Includable]</code>)           \u2013            <p>Included objects of plugin.</p> </li> <li> <code>events</code>               (<code>List[Event]</code>)           \u2013            <p>Events of plugin.</p> </li> </ul> Example <pre><code>plugin = Plugin(\n    \"Admin Plugin\",\n    default_member_permissions=Permissions.ADMINISTRATOR\n)\n\n\n@plugin.include\nclass BanHammerCommand(SlashCommand):\n    def __init__(self) -&gt; None:\n        super().__init__(\n            name=\"ban\",\n            options=[\n                Option(\n                    type=OptionType.USER,\n                    name=\"target\",\n                    description=\"Who was bad today?\"\n                )\n            ]\n        )\n\n    async def callback(self, context: InteractionContext, target: InteractionMember | User) -&gt; None:\n        await context.guild.ban(target)\n        return await context.create_response(\"**@{target.username}** was ban hammered!\")\n</code></pre>"},{"location":"reference/plugins/plugin_manager/","title":"Plugin manager","text":""},{"location":"reference/plugins/plugin_manager/#aurum.ext.plugins.plugin_manager.PluginManager","title":"PluginManager","text":"<p>Plugin manager.</p> <p>Attributes:</p> <ul> <li> <code>plugins</code>               (<code>Dict[str, Plugin]</code>)           \u2013            <p>A dictionary of loaded plugins, keyed by their names.</p> </li> </ul>"},{"location":"reference/plugins/plugin_manager/#aurum.ext.plugins.plugin_manager.PluginManager.load_folder","title":"load_folder  <code>async</code>","text":"<pre><code>load_folder(directory: PathLike[str], *, recursive: bool = True) -&gt; None\n</code></pre> <p>Load plugins from folder.</p>"},{"location":"reference/plugins/plugin_manager/#aurum.ext.plugins.plugin_manager.PluginManager.load_plugin_from_file","title":"load_plugin_from_file","text":"<pre><code>load_plugin_from_file(file: PathLike[str]) -&gt; Plugin | None\n</code></pre> <p>Load plugin from file.</p> <p>File must have a <code>plugin</code> variable.</p>"},{"location":"reference/tasks/cron/","title":"Cron","text":"<p>Important</p> <p>This module requires <code>croniter</code> package. Install <code>croniter</code> by <code>pip install aurum-hikari[cron-tasks]</code> or manully.</p>"},{"location":"reference/tasks/cron/#aurum.ext.tasks.cron.CronTask","title":"CronTask","text":"<p>               Bases: <code>BaseTask</code></p> <p>Task class.</p> <p>Parameters:</p> <ul> <li> <code>callback</code>               (<code>TaskCallbackT[CronTask]</code>)           \u2013            <p>Callback of the task.</p> </li> <li> <code>crontab</code>               (<code>str</code>)           \u2013            <p>Instruction for the croniter.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Name of the task.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>event_loop</code>               (<code>AbstractEventLoop</code>)           \u2013            <p>Event loop to which the task is attached.</p> </li> <li> <code>handler</code>               (<code>TimerHandle</code>)           \u2013            <p>Handler of the task.</p> </li> <li> <code>client</code>               (<code>Client | None</code>)           \u2013            <p>The client that the task is linked to.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the task.</p> </li> <li> <code>callback</code>               (<code>Callable[..., Any]</code>)           \u2013            <p>Callback of the task.</p> </li> <li> <code>croniter</code>               (<code>croniter</code>)           \u2013            <p>Execution instruction.</p> </li> </ul>"},{"location":"reference/tasks/cron/#aurum.ext.tasks.cron.cron_task","title":"cron_task","text":"<pre><code>cron_task(crontab: str, *, name: str | None = None) -&gt; Callable[[TaskCallbackT[CronTask]], CronTask]\n</code></pre> <p>Decorator for task definition.</p>"},{"location":"reference/tasks/task/","title":"Task","text":""},{"location":"reference/tasks/task/#aurum.ext.tasks.task.Task","title":"Task","text":"<p>               Bases: <code>BaseTask</code></p> <p>Task class.</p> <p>Parameters:</p> <ul> <li> <code>callback</code>               (<code>Callable[..., Any]</code>)           \u2013            <p>Callback of the task.</p> </li> <li> <code>delay</code>               (<code>timedelta</code>)           \u2013            <p>Cycle execution delay.</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Name of the task.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>event_loop</code>               (<code>AbstractEventLoop</code>)           \u2013            <p>Event loop to which the task is attached.</p> </li> <li> <code>handler</code>               (<code>TimerHandle</code>)           \u2013            <p>Handler of the task.</p> </li> <li> <code>client</code>               (<code>Client | None</code>)           \u2013            <p>The client that the task is linked to.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the task.</p> </li> <li> <code>callback</code>               (<code>Callable[..., Any]</code>)           \u2013            <p>Callback of the task.</p> </li> <li> <code>delay</code>               (<code>timedelta</code>)           \u2013            <p>Cycle execution delay.</p> </li> </ul>"},{"location":"reference/tasks/task/#aurum.ext.tasks.task.task","title":"task","text":"<pre><code>task(delay: timedelta, *, name: str | None = None) -&gt; Callable[[TaskCallbackT[Task]], Task]\n</code></pre> <p>Decorator for task definition.</p>"}]}